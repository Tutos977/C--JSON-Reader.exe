техническое задание (ТЗ) для реализации простого модуля на языке C# (.NET 6/7), который читает заранее заданный JSON-файл и выводит его содержимое на экран.



Общие сведения
Название проекта: «Программа чтения и вывода JSON-файла»

Версия документа: 1.1

Дата составления: 27 апреля 2024 года

Автор: [Ваше Имя]

2. Цель проекта

Разработать простую программу на C# (.NET 6/7), которая: 

• Имеет в своем коде путь к входному JSON-файлу. 
• Читает указанный JSON-файл. 
• Выводит содержимое файла на экран (консоль) в удобном для чтения виде.

Данная программа может быть интегрирована в более крупную систему, однако на данный момент её основная задача – чтение и отображение содержимого файла.

3. Функциональные требования

3.1. Задание пути к файлу  

• В программе должен быть задан путь к JSON-файлу (жестко зашитый в коде или указан через конфигурационный файл).  
• Файл должен находиться в доступном для чтения месте.

3.2. Чтение файла  

• Программа должна открыть и прочитать содержимое указанного JSON-файла.  
• В случае ошибки (например, файл не найден или нет доступа к файлу) программа должна корректно обработать исключение и вывести сообщение об ошибке.

3.3. Вывод содержимого  

• Содержимое JSON-файла выводится на экран (в консоль) в читаемом формате.  
• Желательно сохранить форматирование (например, с отступами), чтобы структура JSON была видна.

4. Технологические требования

• Язык программирования: C# (.NET 6/7) 
• Библиотеки:   – System.IO для доступа к файловой системе.   – Newtonsoft.Json (Json.NET) или System.Text.Json (опционально) для форматирования JSON-строки. 
• Среда разработки: Visual Studio, Rider или VS Code. • Система контроля версий: Git. • Тестирование: Для проверки функциональности можно использовать простейшие консольные тесты, либо модульное тестирование (NUnit, MSTest, XUnit) по необходимости.

5. Архитектура и структура решения

Приложение может состоять из единственного класса (например, Program), который выполняет следующие задачи:  

1. Считывает путь к файлу (например, заданную строковую переменную).  
2. Читает JSON-файл с использованием стандартных методов System.IO.File.  
3. При необходимости форматирует полученную JSON-строку для лучшей читаемости (например, с отступами).  
4. Выводит содержимое JSON на консоль.

Рекомендуется выделить следующие компоненты: 

• FileReader – компонент, отвечающий за чтение файла. 
• (Опционально) JsonFormatter – компонент для форматирования JSON-строки. 
• Program – основной класс, в котором происходит вызов компонентов и вывод результата на экран.

6. Этапы разработки

Проектирование базовой архитектуры и определение пути к файлу.
Реализация функции чтения файла (компонент FileReader) с обработкой ошибок.
(Опционально) Реализация функции форматирования JSON с использованием выбранной библиотеки.
Вывод содержимого файла на консоль.
Тестирование работы программы с существующим JSON-файлом.
Документирование кода и подготовка пользовательской документации (если необходимо).

7. Критерии приемки

• Функциональность: Программа должна корректно читать указанный JSON-файл и выводить его содержимое на экран. 
• Обработка ошибок: При отсутствии файла или возникновении ошибки доступа – выводится понятное сообщение об ошибке. 
• Читаемость вывода: Выводимый JSON должен сохранять структуру (с отступами, если используется форматирование). • Качество кода: Код структурирован, легко поддерживается и понятен.

8. Пример рабочего сценария

В коде задается строка с путем к файлу, например: "C:\Data\input.json".
Программа запускается, читается файл, его содержимое парсится и выводится на консоль.
Если файл успешно прочитан, в консоли отображается форматированный JSON.
При возникновении ошибки (например, файл не найден) программа выводит сообщение об ошибке.